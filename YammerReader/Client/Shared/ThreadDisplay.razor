@inject NavigationManager MyNavigater
@inherits Library.CommonBlazorBase

@if (ListData == null)
{
    <LoadingIndicator />
}
@if (ListData != null)
{
    @foreach (var item in ListData)
    {
        <div class="card border-secondary mb-1">
            <div class="card-header">
                <div class="yammer-avatar-bridge">
                    <Avatar user_name="@item.sender_name"/>
                </div>
                <div class="yammer-message-header">
                    <div class="sender_name">@item.sender_name</div>
                    <div class="dash">-</div>
                    <div class="created_at">
                        @string.Format("{0:MMM d}", item.created_at)
                        at
                        @string.Format("{0:h:mm tt}", item.created_at)
                    </div>
                </div>
            </div>
            <div class="card-body text-secondary">
              <div class="yammer-message-body">@((MarkupString)FormatContext(item.body))</div>
                <ul class="list-group list-group-flush">
                @if (item.AttachmentFiles != null)
                {
                    foreach (var file in item.AttachmentFiles)
                    {
                        <li class="list-group-item">
                        @if(CheckIsPicture(file.file_type))
                        {
                            <img class="img-fluid img-thumbnail" src="@file.file_url" alt="Uploaded image: No description set. @file.file_name">
                        }
                        else
                        {
                            <DocLinkButton file="@file" />
                        }
                        </li>
                    }
                }
                @if (MyNavigater.Uri.Contains("/Threads/") == false)
                {
                    <li class="list-group-item">
                        <a class="btn btn-outline-primary btn-sm" @onclick="(()=>ThreadLinkClick(item))">
                        <span class="oi oi-link-intact" aria-hidden="true"></span> View Conversation</a>
                    </li>
                }
                </ul> 
            </div>
        </div>

        @if (MyNavigater.Uri.Contains("/Search/") == false && @item.CountPrevoiusReplies() > 0)
        {
            <div class="card border-secondary bg-secondary bg-opacity-10 mb-1 ms-3">
                <div class="card-header">
                    <button type="button" class="btn btn-outline-secondary btn-sm @SetDisabled(item)" @onclick="(()=>RetrieveReplies(item))">
                        <span class="oi oi-chat" aria-hidden="true"></span> Show @item.CountPrevoiusReplies() previous replies
                    </button>
                </div>
            </div>
        }

        if (item.Replies != null)
        {
            @foreach (var replyitem in item.Replies.OrderBy(m=>m.created_at))
            {
                <div class="card border-warning bg-warning bg-opacity-10 mb-1 ms-3">
                    <div class="card-header">
                        <div class="yammer-avatar-bridge">
                        <Avatar user_name="@replyitem.sender_name"/>
                    </div>
                    <div class="yammer-message-header">
                        <div class="sender_name">@replyitem.sender_name</div>
                        <div class="dash">-</div>
                        <div class="created_at">
                            @string.Format("{0:MMM d}", replyitem.created_at)
                            at
                            @string.Format("{0:h:mm tt}", replyitem.created_at)
                        </div>
                    </div>
                    </div>
                    <div class="card-body border-warning pt-2 pb-2">
                        <div class="yammer-message-body">@((MarkupString)FormatContext(replyitem.body))</div>
                        <ul class="list-group list-group-flush">
                        @if (replyitem.AttachmentFiles != null)
                        {
                
                            foreach (var file in replyitem.AttachmentFiles)
                            {
                                <li class="list-group-item list-group-item-warning">
                                    @if(CheckIsPicture(file.file_type))
                                    {
                                        <img class="img-fluid img-thumbnail" src="@file.file_url" alt="Uploaded image: No description set. @file.file_name">
                                    }
                                    else
                                    {
                                        <DocLinkButton file="@file" />
                                    }
                                </li>
                            }
                        }
                        </ul>
                    </div>
                </div>
            }
        }
        <div class="border-bottom border-warning mt-2 mb-2"></div>
    }
 }