
@if (Model.TotalPage > 1)
{
    <nav aria-label="Page navigation" class="shadow-sm rounded">
        <ul class="pagination justify-content-center">
            <li style="cursor:pointer" class="page-item @(Model.PageIndex>1?"":"disabled")"><a class="page-link" @onclick="@(()=> PageToAsync(Model.PageIndex-1))">前頁</a></li>
            @if (Model.PageIndex > 3)
            {
                <li style="cursor:pointer" class="page-item @(Model.PageIndex>1?"":"disabled")"><a class="page-link" @onclick="@(()=> PageToAsync(1))">1</a></li>
            }
            @if (Model.PageIndex > 4)
            {
                <li style="cursor:pointer" class="page-item disabled"><span class="page-link">...</span></li>
            }
            @if (Model.PageIndex > 2)
            {
                <li style="cursor:pointer" class="page-item"><a class="page-link" @onclick="@(()=> PageToAsync(Model.PageIndex-2))">@(Model.PageIndex-2)</a></li>
            }
            @if (Model.PageIndex > 1)
            {
                <li style="cursor:pointer" class="page-item"><a class="page-link" @onclick="@(()=> PageToAsync(Model.PageIndex-1))">@(Model.PageIndex-1)</a></li>
            }

            <li style="cursor:pointer" class="page-item active"><span class="page-link">@Model.PageIndex</span></li>

            @if (Model.PageIndex + 1 <= Model.TotalPage)
            {
                <li style="cursor:pointer" class="page-item"><a class="page-link" @onclick="@(()=> PageToAsync(Model.PageIndex+1))">@(Model.PageIndex+1)</a></li>
            }
            @if (Model.PageIndex + 2 <= Model.TotalPage)
            {
                <li style="cursor:pointer" class="page-item"><a class="page-link" @onclick="@(()=> PageToAsync(Model.PageIndex+2))">@(Model.PageIndex+2)</a></li>
            }
            @if (Model.PageIndex + 4 <= Model.TotalPage)
            {
                <li style="cursor:pointer" class="page-item disabled"><span class="page-link">...</span></li>
            }
            @if (Model.PageIndex + 3 <= Model.TotalPage)
            {
                <li style="cursor:pointer" class="page-item @(Model.PageIndex * Model.PageSize < Model.AllCount?"":"disabled")"><a class="page-link" @onclick="@(()=> PageToAsync(Model.TotalPage))">@Model.TotalPage</a></li>
            }
            <li style="cursor:pointer" class="page-item @(Model.PageIndex * Model.PageSize < Model.AllCount?"":"disabled")"><a class="page-link" @onclick="@(()=> PageToAsync(Model.PageIndex+1))">次頁</a></li>
        </ul>
    </nav>
}
@code {
    [Parameter] public DataModel.PagerModel Model { get; set; } = new DataModel.PagerModel();
    [Parameter] public EventCallback<int> OnPageClickedEvent { get; set; }
    [Parameter] public EventCallback<int> OnPageScrollEndEvent { get; set; }
    [Inject] protected IJSRuntime js { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (OnPageScrollEndEvent.HasDelegate)
        {
            var dotnethelper = DotNetObjectReference.Create(this);
            js.InvokeVoidAsync("RegisterPage", new object[] { dotnethelper, "OnPageScrollEnd" });
        }
        return base.OnInitializedAsync();
    }


    private async Task PageToAsync(int pageIndex)
    {
        await Task.Delay(0);
        if (OnPageClickedEvent.HasDelegate)
        {
            Model.PageIndex = pageIndex;
            await OnPageClickedEvent.InvokeAsync(pageIndex);
        }
    }

    [JSInvokable]
    public async Task OnPageScrollEnd()
    {
        await Task.Delay(0);
        if (OnPageClickedEvent.HasDelegate)
        {
            int pageIndex = Model.PageIndex + 1;
            if (pageIndex > Model.TotalPage)
            {
                return;
            }
            await OnPageScrollEndEvent.InvokeAsync(pageIndex);
        }
    }
 }
